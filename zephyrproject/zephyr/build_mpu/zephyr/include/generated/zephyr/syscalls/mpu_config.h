/* auto-generated by gen_syscalls.py, don't edit */

#ifndef Z_INCLUDE_SYSCALLS_MPU_CONFIG_H
#define Z_INCLUDE_SYSCALLS_MPU_CONFIG_H


#include <zephyr/tracing/tracing_syscall.h>

#ifndef _ASMLANGUAGE

#include <stdarg.h>

#include <zephyr/syscall_list.h>
#include <zephyr/syscall.h>

#include <zephyr/linker/sections.h>


#ifdef __cplusplus
extern "C" {
#endif

extern int z_impl_MPU_Enable_syscall(void);

__pinned_func
static inline int MPU_Enable_syscall(void)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke0(K_SYSCALL_MPU_ENABLE_SYSCALL);
	}
#endif
	compiler_barrier();
	return z_impl_MPU_Enable_syscall();
}

#if defined(CONFIG_TRACING_SYSCALL)
#ifndef DISABLE_SYSCALL_TRACING

#define MPU_Enable_syscall() ({ 	int syscall__retval; 	sys_port_trace_syscall_enter(K_SYSCALL_MPU_ENABLE_SYSCALL, MPU_Enable_syscall); 	syscall__retval = MPU_Enable_syscall(); 	sys_port_trace_syscall_exit(K_SYSCALL_MPU_ENABLE_SYSCALL, MPU_Enable_syscall, syscall__retval); 	syscall__retval; })
#endif
#endif


extern int z_impl_MPU_Disable_syscall(void);

__pinned_func
static inline int MPU_Disable_syscall(void)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke0(K_SYSCALL_MPU_DISABLE_SYSCALL);
	}
#endif
	compiler_barrier();
	return z_impl_MPU_Disable_syscall();
}

#if defined(CONFIG_TRACING_SYSCALL)
#ifndef DISABLE_SYSCALL_TRACING

#define MPU_Disable_syscall() ({ 	int syscall__retval; 	sys_port_trace_syscall_enter(K_SYSCALL_MPU_DISABLE_SYSCALL, MPU_Disable_syscall); 	syscall__retval = MPU_Disable_syscall(); 	sys_port_trace_syscall_exit(K_SYSCALL_MPU_DISABLE_SYSCALL, MPU_Disable_syscall, syscall__retval); 	syscall__retval; })
#endif
#endif


#ifdef __cplusplus
}
#endif

#endif
#endif /* include guard */
